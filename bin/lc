#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib', __FILE__)

begin
  require 'linecook'
  require 'optparse'

  options = Linecook.options(
    :mode  => :render,
    :input => :args,
  )
  OptionParser.new do |opts|
    opts.banner = %{
usage: lc [options] TEMPLATE ARGS...

  Render ERB templates with arguments.

options:

}.lstrip

    opts.on("-F", "--field-sep FS", "field sep for csv inputs (assumes -f)") do |input|
      options[:input] = :csv
      options[:field_sep] = input
    end

    opts.on("-f", "--csv-file", "read args from csv inputs") do
      options[:input] = :csv
    end

    opts.on("-H", "--headers", "map csv headers to args") do
      options[:input] = :csv
      options[:headers] = true
    end

    opts.on("-I", "--path LC_PATH", "set template search path") do |input|
      options[:path] = input
    end

    opts.on("-l", "--list", "list templates") do
      options[:mode] = :list
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      exit
    end

  end.parse!

  mode  = options[:mode]
  input = options[:input]

  config = Linecook.setup(options)
  template_file, *csv_files = ARGV; ARGV.clear

  case mode
  when :list
    max_name = config.templates.keys.map(&:size).length
    format = "%-#{max_name}s    %s"
    config.templates.each_pair do |name, template|
      line = format % [name, template.desc]
      puts line.strip
    end

  else
    template = \
    if File.exists?(template_file)
      Linecook::Template.new(template_file)
    else
      config.templates[template_file]
    end

    if template.nil?
      $stderr.puts "could not find template: #{template_file.inspect}"
      exit 1
    end

    case input
    when :args
      args = csv_files
      print template.result(args)
    when :csv
      if csv_files.empty?
        csv_files << "-" 
      end

      csv_files.each do |file|
        file = 0 if file == "-"
        File.open(file) do |source|
          parser = config.parser(source, template.arg_names)
          while args = parser.gets
            print template.result(args)
          end
        end
      end
    end
  end

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
end
