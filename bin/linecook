#!/usr/bin/env ruby
begin
  ###########################################################################
  require 'optparse'
  require 'erb'
  autoload :YAML, 'yaml'
  autoload :Pathname, 'pathname'
  autoload :FileUtils, 'fileutils'

  module Linecook
    VERSION="2.0.0"
    RELDATE="2017-01-02"
    URL="https://github.com/goodlittlescript/linecook"

    class Context < BasicObject
      attr_reader :obj

      def initialize(obj, template_file)
        @obj  = obj
        @template_file = template_file
      end

      def __template_file__
        @template_file
      end

      def __render__(erb)
        erb.result(::Kernel.binding)
      end
    end

    class Template
      attr_reader :template_file
      attr_reader :template_dir

      def initialize(template_file, template_dir = nil)
        @template_file = template_file
        @template_dir = template_dir || File.dirname(template_file)
      end

      def path
        @path ||= Pathname.new File.expand_path(template_file)
      end

      def dir_path
        @dir_path ||= Pathname.new(File.expand_path(template_dir))
      end

      def relative_path
        @relative_path ||= path.relative_path_from(dir_path)
      end

      def text
        @text ||= File.read(template_file)
      end

      def erb
        @erb ||= begin
          erb = ERB.new(text, nil, "<>")
          erb.filename = template_file
          erb
        end
      end

      def context(obj)
        Context.new(obj, template_file)
      end

      def result(obj)
        context(obj).__render__(erb)
      end
    end

    class Printer
      attr_reader :options

      def initialize(options = {})
        @options = options
      end

      def setup
        self
      end

      def teardown
        self
      end

      def target_for(template)
        raise NotImplementedError
      end
    end

    class StdoutPrinter < Printer
      def target_for(template)
        $stdout
      end
    end

    class DirectoryPrinter < Printer
      def target_dir
        options[:target_dir]
      end

      def force?
        options[:force]
      end

      def setup
        if File.exists?(target_dir) && !Dir.entries(target_dir).empty?
          if force?
            FileUtils.rm_r(target_dir)
          else
            $stderr.puts "target dir already exists and is not empty: #{target_dir.inspect}"
            exit 1
          end
        end
        @targets = {}
        super
      end

      def teardown
        @targets.each_value do |target|
          target.close
          puts target.path
        end
        @targets = nil
        super
      end

      def target_for(template)
        target_file = File.join(target_dir, template.relative_path.to_s)

        @targets[target_file] ||= begin
          dirname = File.dirname(target_file)
          FileUtils.mkdir_p(dirname) unless File.exists?(dirname)
          File.open(target_file, "w")
        end
      end
    end

    class Parser
      attr_reader :io
      attr_reader :options

      def initialize(io, options = {})
        @io = io
        @options = options
      end

      def each
        raise NotImplementedError
      end
    end

    class LineParser < Parser
      def each
        while line = io.gets
          yield YAML.load(line)
        end
      end
    end

    class DocumentParser < Parser
      def each
        YAML.load_stream(io) do |obj|
          yield obj
        end
      end
    end

    class Generator < Parser
      def each
        yield({})
      end
    end
  end
  include Linecook
  ###########################################################################

  parser_classes = {
    line: LineParser,
    document: DocumentParser,
    generator: Generator,
  }
  printer_classes = {
    stdout: StdoutPrinter,
    directory: DirectoryPrinter,
  }
  options = {
    input_file: nil,
    template_type: :file_or_dir,
    parser_type: :generator,
    parser_opts: {
      line: {},
      document: {},
      generator: {},
    },
    printer_type: :stdout,
    printer_opts: {
      stdout: {},
      directory: {
        source_dir: nil,
        target_dir: nil,
        force: false
      }
    },
    requires: [],
  }
  OptionParser.new do |opts|
    opts.banner = %{
usage: linecook [options] TEMPLATES...

  Render ERB templates.

options:

}.lstrip

    opts.on("-A FILE", "input attrs as lines") do |input|
      options[:input_file] = input == '-' ? 0 : input
      options[:parser_type] = :line
    end

    opts.on("-a FILE", "input attrs as documents") do |input|
      options[:input_file] = input == '-' ? 0 : input
      options[:parser_type] = :document
    end

    opts.on("-e", "specify templates as strings") do
      options[:template_type] = :string
    end

    opts.on("-f", "--[no-]force", "overwrite target dir when using -o") do |input|
      options[:printer_opts][:directory][:force] = input
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts "version #{Linecook::VERSION} #{Linecook::RELDATE} - #{Linecook::URL}"
      exit
    end

    opts.on("-o TARGET_DIR", "output to target dir") do |input|
      source_dir, target_dir = input.split(':')
      source_dir, target_dir = nil, source_dir if target_dir.nil?

      options[:printer_type] = :directory
      options[:printer_opts][:directory][:target_dir] = target_dir
    end

    opts.on("-r FILE", "require file before rendering") do |input|
      options[:requires] << File.expand_path(input)
    end
  end.parse!

  input_file = options[:input_file]
  template_type = options[:template_type]
  parser_type = options[:parser_type]
  parser_opts = options[:parser_opts][parser_type]
  printer_type = options[:printer_type]
  printer_opts = options[:printer_opts][printer_type]
  requires = options[:requires]

  template_files = ARGV.dup; ARGV.clear

  if template_files.empty?
    $stderr.puts 'no template specified'
    exit 1
  end
  requires.each {|file| require file }

  tempfiles = []
  templates = []
  template_files.each do |template_file|
    case 
    when template_type == :string
      require 'tempfile'
      tempfile = Tempfile.new('linecook')
      tempfile.puts(template_file)
      tempfile.close
      tempfiles << tempfile
      templates << Template.new(tempfile.path)
    when File.file?(template_file)
      templates << Template.new(template_file)
    when File.directory?(template_file)
      template_dir = template_file
      pattern = File.join(template_dir, '**/*')
      Dir.glob(pattern) do |template_file|
        next if File.directory?(template_file)
        templates << Template.new(template_file, template_dir)
      end
    else
      $stderr.puts "does not exist: #{template_file.inspect}"
      exit 1
    end
  end

  input_io = File.open(input_file || 0)
  parser_class = parser_classes[parser_type]
  parser = parser_class.new(input_io, parser_opts)

  printer_class = printer_classes[printer_type]
  printer = printer_class.new(printer_opts)
  
  printer.setup
  parser.each do |obj|
    templates.each do |template|
      target = printer.target_for(template) 
      target.print template.result(obj)
    end
  end
  printer.teardown
  input_io.close

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
end
