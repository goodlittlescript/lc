#!/bin/bash
. test/integration/helper

setup () {
mkdir -p "$ts_test_dir/recipes"

template_name="example"
template_file="$ts_test_dir/recipes/$template_name.lc"
template_dir="$ts_test_dir/recipes/$template_name"
}

setup_fixture () {
cat > "$template_file" <<DOC
got <%= fields.join(' ') %> {<%= attrs.to_a.map {|kv| kv.join('=') }.join(' ') %>}
DOC
}

setup_fixture_with_properties () {
cat > "$template_file" <<DOC
attrs:
  kk: v
fields:
  xx: X
  yy: Y
  zz: Z
---
got <%= xx %> <%= yy %> <%= zz %> {<%= kk %>}
DOC
}

#
# linecook tests
#

test_linecook_renders_file_with_arguments_as_fields () {
cat > "$template_file" <<DOC
got <%= fields.join(' ') %>
DOC

linecook "$template_file" a b c | assert_output "\
got a b c
"
}

test_linecook_renders_dir_with_arguments_as_fields () {
mkdir -p "$template_dir"

cat > "$template_dir/a.lc" <<DOC
A <%= fields.join(' ') %> {<%= attrs.to_a.map {|kv| kv.join('=') }.join(' ') %>}
a <%= fields.join(' ') %> {<%= attrs.to_a.map {|kv| kv.join('=') }.join(' ') %>}
DOC

mkdir -p "$template_dir/b"
cat > "$template_dir/b/c.lc" <<DOC
C <%= fields.join(' ') %> {<%= attrs.to_a.map {|kv| kv.join('=') }.join(' ') %>}
c <%= fields.join(' ') %> {<%= attrs.to_a.map {|kv| kv.join('=') }.join(' ') %>}
DOC

linecook "$template_dir" x y z | assert_output "\
[a] - 22
A x y z {}
a x y z {}
[b/c] - 22
C x y z {}
c x y z {}
"
}

test_linecook_assigns_fields_according_to_properties () {
cat > "$template_file" <<DOC
fields:
  xx: X
  yy: Y
  zz: Z
---
got <%= xx %> <%= yy %> <%= zz %>
DOC

linecook "$template_file" a b | assert_output "\
got a b Z
"
}

test_linecook_assigns_attribute_according_to_properties () {
cat > "$template_file" <<DOC
attrs:
  kk: v
---
got <%= fields.join(' ') %> <%= kk %>
DOC

linecook "$template_file" a b | assert_output "\
got a b v
"
}

test_linecook_can_set_ERB_trim_mode_in_properties () {
cat > "$template_file" <<DOC
trim: '%'
---
% a = 1
% b = 2
% c = 1 + 2
<%= a %> + <%= b %> = <%= c %>
DOC

linecook "$template_file" | assert_output "\
1 + 2 = 3
"
}

test_linecook_looks_up_template_file_along_LINECOOK_PATH () {
printf "%s" "<%= 1 + 2 %>" > "$template_file"
export LINECOOK_PATH="$ts_test_dir"
linecook "$template_name" | assert_output "3"
}

test_linecook_can_find_template_files_under_dir () {
mkdir -p "$ts_test_dir/recipes/dir"
printf "%s" "<%= 1 + 2 %>" > "$ts_test_dir/recipes/dir/$template_name.lc"
export LINECOOK_PATH="$ts_test_dir"
linecook "dir/$template_name" | assert_output "3"
}

test_linecook_prints_error_if_template_cannot_be_found_on_LINECOOK_PATH () {
export LINECOOK_PATH="$ts_test_dir"
linecook missing 2>&1 | assert_output "\
could not find template: \"missing\"
"
}

test_linecook_prints_error_if_no_template_is_specified () {
linecook 2>&1 | assert_output "\
no template specified
"
}

#
# -A
#

test_linecook_A_sets_attribute () {
setup_fixture_with_properties

linecook -A kk=V "$template_file" a b c | assert_output "\
got a b c {V}
"
}

#
# -a
#

test_linecook_a_sets_attributes_from_file () {
setup_fixture_with_properties

cat > "$ts_test_dir/attrs.yml" <<DOC
kk: V
DOC

linecook -a "$ts_test_dir/attrs.yml" "$template_file" a b c | assert_output "\
got a b c {V}
"
}

#
# -e
#

test_linecook_e_provides_erb_template () {
setup_fixture

linecook -e "$(cat "$template_file")" a b c | assert_output "\
got a b c {}
"
}

#
# -c
#

test_linecook_c_renders_template_for_each_line_in_csv_inputs () {
setup_fixture

csv_file_one="$ts_test_dir/one.csv"
printf "%s,%s,%s\n" a b c i j k > "$csv_file_one"

csv_file_two="$ts_test_dir/two.csv"
printf "%s,%s,%s\n" x y z > "$csv_file_two"

printf "%s,%s,%s\n" p q r |
linecook -c "$template_file" "$csv_file_one" - "$csv_file_two" | assert_output "\
got a b c {}
got i j k {}
got p q r {}
got x y z {}
"
}

#
# -F
#

test_linecook_F_sets_field_sep_for_csv_inputs () {
setup_fixture

printf "%s|%s|%s\n" a b c x y z |
linecook -F '|' "$template_file" | assert_output "\
got a b c {}
got x y z {}
"
}

#
# -f
#

test_linecook_f_overwrites_existing_files () {
setup_fixture
cat > "$ts_test_dir/output" <<DOC
existing
DOC

linecook -o "$ts_test_dir/output" -f "$template_file" a b c
assert_status 0 $? "check linecook overwrite"

cat "$ts_test_dir/output" | assert_output "\
got a b c {}
"
}

# -H
#

test_linecook_H_specifies_each_csv_file_has_headers () {
setup_fixture

csv_file_one="$ts_test_dir/one.csv"
printf "%s,%s,%s\n" xx yy zz a b c d e f> "$csv_file_one"

csv_file_two="$ts_test_dir/two.csv"
printf "%s,%s,%s\n" xx yy zz k l m > "$csv_file_two"

printf "%s,%s,%s\n" xx yy zz h i j |
linecook -H "$template_file" "$csv_file_one" - "$csv_file_two" | assert_output "\
got a b c {}
got d e f {}
got h i j {}
got k l m {}
"
}

test_linecook_H_maps_csv_fields_to_named_fields_on_a_per_file_basis () {
setup_fixture_with_properties

# extra fields
csv_file_one="$ts_test_dir/one.csv"
printf "%s,%s,%s,%s\n" xx yy zz __ a b c _ d e f _ > "$csv_file_one"

# out-of-order fields
csv_file_two="$ts_test_dir/two.csv"
printf "%s,%s,%s\n" yy zz xx l m k > "$csv_file_two"

# missing fields
printf "%s,%s\n" xx yy h i |
linecook -H "$template_file" "$csv_file_one" - "$csv_file_two" | assert_output "\
got a b c {v}
got d e f {v}
got h i Z {v}
got k l m {v}
"
}

#
# -I
#

test_linecook_I_sets_LINECOOK_PATH () {
printf "%s" "<%= 1 + 2 %>" > "$template_file"
linecook -I "$ts_test_dir" "$template_name" | assert_output "3"
}

#
# -l
#

test_linecook_l_prints_list_of_templates_on_LINECOOK_PATH () {
mkdir -p "$ts_test_dir/recipes/x/y"
touch "$ts_test_dir/recipes/abc.lc"
touch "$ts_test_dir/recipes/x/y/z.lc"
export LINECOOK_PATH="$ts_test_dir"
linecook -l | assert_output "\
abc
x/y/z
"
}

test_linecook_l_prints_list_of_matching_templates_on_LINECOOK_PATH () {
touch "$ts_test_dir/recipes/abc.lc"
touch "$ts_test_dir/recipes/abd.lc"
touch "$ts_test_dir/recipes/a.lc"
touch "$ts_test_dir/recipes/ax.lc"

export LINECOOK_PATH="$ts_test_dir"
linecook -l ab | assert_output "\
abc
abd
"
}

#
# -h
#

test_linecook_h_prints_help () {
linecook -h | grep -q "usage: linecook"
}

#
# -o
#

test_linecook_o_creates_specified_output_file () {
setup_fixture
linecook -o "$ts_test_dir/output" "$template_file" a b c
cat "$ts_test_dir/output" | assert_output "\
got a b c {}
"
}

test_linecook_o_does_not_overwrite_existing_files () {
setup_fixture
cat > "$ts_test_dir/output" <<DOC
existing
DOC

linecook -o "$ts_test_dir/output" "$template_file" a b c
assert_status 1 $? "check linecook failed to overwrite"

cat "$ts_test_dir/output" | assert_output "\
existing
"
}

test_linecook_o_creates_file_with_according_to_mode () {
cat > "$template_file" <<DOC
mode: 0600
---
DOC

linecook -o "$ts_test_dir/output" "$template_file" a b c
ls -la "$ts_test_dir/output" | awk '{ print $1 }' | assert_output "\
-rw-------
" 
}

test_linecook_o_creates_files_in_output_dir_when_rendering_dir () {
mkdir -p "$template_dir/input"
cat > "$template_dir/input/a.lc" <<DOC
A <%= fields.join(' ') %>
DOC

mkdir -p "$template_dir/input/b"
cat > "$template_dir/input/b/c.lc" <<DOC
C <%= fields.join(' ') %>
DOC

linecook -o "$ts_test_dir/output" "$template_dir/input" x y z

cat "$ts_test_dir/output/a" "$ts_test_dir/output/b/c" | assert_output "\
A x y z
C x y z
"
}

. ts
