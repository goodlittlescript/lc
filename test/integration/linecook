#!/bin/bash
. test/integration/helper

setup () {
mkdir -p "$ts_test_dir"

template_name="example"
template_file="$ts_test_dir/$template_name.erb"
properties_file="$ts_test_dir/$template_name.yml"
}

setup_fixture () {
cat > "$template_file" <<DOC
got <%= fields.join(' ') %> {<%= attrs.to_a.map {|kv| kv.join('=') }.join(' ') %>}
DOC
}

setup_fixture_with_properties () {
cat > "$template_file" <<DOC
got <%= xx %> <%= yy %> <%= zz %> {<%= kk %>}
DOC

cat > "$properties_file" <<DOC
attrs:
  kk: v
fields:
  xx: X
  yy: Y
  zz: Z
DOC
}

#
# linecook tests
#

test_linecook_f_renders_template_for_each_line_in_csv_inputs () {
setup_fixture

csv_file_one="$ts_test_dir/one.csv"
printf "%s,%s,%s\n" a b c i j k > "$csv_file_one"

csv_file_two="$ts_test_dir/two.csv"
printf "%s,%s,%s\n" x y z > "$csv_file_two"

printf "%s,%s,%s\n" p q r |
linecook "$template_file" "$csv_file_one" - "$csv_file_two" | assert_output "\
got a b c {}
got i j k {}
got p q r {}
got x y z {}
"
}

test_linecook_assigns_field_names_according_to_properties_file () {
cat > "$template_file" <<DOC
got <%= xx %> <%= yy %> <%= zz %>
DOC

cat > "$properties_file" <<DOC
fields: [xx, yy, zz]
DOC

printf "%s,%s,%s\n" a b c | linecook "$template_file" | assert_output "\
got a b c
"
}

test_linecook_assigns_field_defaults_according_to_properties_file () {
cat > "$template_file" <<DOC
got <%= xx %> <%= yy %> <%= zz %>
DOC

cat > "$properties_file" <<DOC
fields:
  xx: X
  yy: Y
  zz: Z
DOC

printf "%s,%s\n" a b | linecook "$template_file" | assert_output "\
got a b Z
"
}

test_linecook_assigns_attribute_defaults_according_to_properties_file () {
cat > "$template_file" <<DOC
got <%= fields.join(' ') %> <%= kk %>
DOC

cat > "$properties_file" <<DOC
attrs:
  kk: v
DOC

printf "%s,%s\n" a b c d | linecook "$template_file" | assert_output "\
got a b v
got c d v
"
}

test_linecook_recognizes_properties_in_lc_files () {
cat > "$ts_test_dir/example.lc" <<DOC
fields:
  xx: X
  yy: Y
  zz: Z
---
got <%= xx %> <%= yy %> <%= zz %>
DOC

printf "%s,%s\n" a b | linecook "$ts_test_dir/example.lc" | assert_output "\
got a b Z
"
}

test_linecook_looks_up_template_file_along_LINECOOK_PATH () {
printf "%s" "<%= 1 + 2 %>" > "$template_file"
export LINECOOK_PATH="$ts_test_dir"
linecook -f "$template_name" | assert_output "3"
}

test_linecook_can_find_template_files_under_dir () {
mkdir -p "$ts_test_dir/dir"
printf "%s" "<%= 1 + 2 %>" > "$ts_test_dir/dir/$template_name.erb"
export LINECOOK_PATH="$ts_test_dir"
linecook -f "dir/$template_name" | assert_output "3"
}

test_linecook_prints_error_if_template_cannot_be_found_on_LINECOOK_PATH () {
export LINECOOK_PATH="$ts_test_dir"
linecook missing 2>&1 | assert_output "\
could not find template: \"missing\"
"
}

test_linecook_prints_error_if_no_template_is_specified () {
linecook 2>&1 | assert_output "\
no template specified
"
}

#
# -f
#

test_linecook_f_renders_file_with_arguments_as_fields () {
cat > "$template_file" <<DOC
got <%= fields.join(' ') %>
DOC

linecook -f "$template_file" a b c | assert_output "\
got a b c
"
}

#
# -F
#

test_linecook_F_sets_field_sep_for_csv_inputs () {
setup_fixture

printf "%s|%s|%s\n" a b c x y z |
linecook -F '|' "$template_file" | assert_output "\
got a b c {}
got x y z {}
"
}

#
# -H
#

test_linecook_H_specifies_each_csv_file_has_headers () {
setup_fixture

csv_file_one="$ts_test_dir/one.csv"
printf "%s,%s,%s\n" xx yy zz a b c d e f> "$csv_file_one"

csv_file_two="$ts_test_dir/two.csv"
printf "%s,%s,%s\n" xx yy zz k l m > "$csv_file_two"

printf "%s,%s,%s\n" xx yy zz h i j |
linecook -H "$template_file" "$csv_file_one" - "$csv_file_two" | assert_output "\
got a b c {}
got d e f {}
got h i j {}
got k l m {}
"
}

test_linecook_H_maps_csv_fields_to_named_fields_on_a_per_file_basis () {
setup_fixture_with_properties

# extra fields
csv_file_one="$ts_test_dir/one.csv"
printf "%s,%s,%s,%s\n" xx yy zz __ a b c _ d e f _ > "$csv_file_one"

# out-of-order fields
csv_file_two="$ts_test_dir/two.csv"
printf "%s,%s,%s\n" yy zz xx l m k > "$csv_file_two"

# missing fields
printf "%s,%s\n" xx yy h i |
linecook -H "$template_file" "$csv_file_one" - "$csv_file_two" | assert_output "\
got a b c {v}
got d e f {v}
got h i Z {v}
got k l m {v}
"
}

#
# -I
#

test_linecook_I_sets_LINECOOK_PATH () {
printf "%s" "<%= 1 + 2 %>" > "$template_file"
linecook -f -I "$ts_test_dir" "$template_name" | assert_output "3"
}

#
# -L
#

test_linecook_L_prints_list_of_matching_templates_on_LINECOOK_PATH () {
mkdir -p "$ts_test_dir"
touch "$ts_test_dir/abc.erb"
touch "$ts_test_dir/abd.erb"
touch "$ts_test_dir/a.erb"
touch "$ts_test_dir/ax.erb"

export LINECOOK_PATH="$ts_test_dir"
linecook -L ab | assert_output "\
abc
abd
"
}

test_linecook_L_prints_all_templates_if_no_template_is_specified () {
mkdir -p "$ts_test_dir"
touch "$ts_test_dir/abc.erb"
touch "$ts_test_dir/xyz.erb"

export LINECOOK_PATH="$ts_test_dir"
linecook -L | assert_output "\
abc
xyz
"
}

#
# -l
#

test_linecook_l_prints_list_of_templates_on_LINECOOK_PATH () {
mkdir -p "$ts_test_dir"
touch "$ts_test_dir/abc.erb"
touch "$ts_test_dir/xyz.erb"
export LINECOOK_PATH="$ts_test_dir"
linecook -l | assert_output "\
abc
xyz
"
}

test_linecook_l_prints_desc_as_in_properties_file_if_present () {
mkdir -p "$ts_test_dir"

touch "$ts_test_dir/abc.erb"
cat > "$ts_test_dir/abc.yml" <<DOC
desc: "the abc template"
DOC

touch "$ts_test_dir/xyz.erb"
cat > "$ts_test_dir/xyz.yml" <<DOC
# no desc
DOC

export LINECOOK_PATH="$ts_test_dir"
linecook -l | assert_output "\
abc    the abc template
xyz
"
}

#
# -h
#

test_linecook_h_prints_help () {
linecook -h | grep -q "usage: linecook"
}

. ts
