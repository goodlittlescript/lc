#!/bin/bash
. test/helper

setup () {
input_file="$ts_test_dir/input"
output_dir="$ts_test_dir/output"
templates_dir="$ts_test_dir/templates"
template_file="$templates_dir/template"
}

setup_fixture () {
mkdir -p "$templates_dir"
cat > "$template_file" <<DOC
got <%= obj.inspect %>
DOC
}

setup_dir_fixture () {
mkdir -p "$templates_dir/z"

cat > "$templates_dir/x" <<DOC
x <%= obj.inspect %>
DOC
cat > "$templates_dir/y.erb" <<DOC
y <%= obj.inspect %>
DOC
cat > "$templates_dir/z/z.erb" <<DOC
z <%= obj.inspect %>
DOC
}

#
# linecook tests
#

test_linecook_renders_template_with_empty_object () {
setup_fixture

linecook "$template_file" | assert_output "\
got {}
"
}

test_linecook_prints_error_if_no_template_is_specified () {
linecook 2>&1 | assert_output "\
no template specified
"
}

test_linecook_prints_error_if_template_does_not_exist () {
linecook "$template_file" 2>&1 | assert_output "\
not a file: \"$template_file\"
"
}

test_linecook_prints_error_if_dir_is_specified () {
linecook "$ts_test_dir" 2>&1 | assert_output "\
not a file: \"$ts_test_dir\"
"
}

#
# -A
#

test_linecook_A_parses_lines_of_yaml () {
setup_fixture

cat > "$input_file" <<DOC
{a: 1, b: 2, c: 3}
[1, 2, 3]
DOC

linecook -A "$input_file" "$template_file" | assert_output "\
got {\"a\"=>1, \"b\"=>2, \"c\"=>3}
got [1, 2, 3]
"
}

#
# -a
#

test_linecook_a_renders_stream_of_yaml_objects () {
setup_fixture

cat > "$input_file" <<DOC
---
a: 1
b: 2
c: 3
---
- 1
- 2
- 3
DOC

linecook -a "$input_file" "$template_file" | assert_output "\
got {\"a\"=>1, \"b\"=>2, \"c\"=>3}
got [1, 2, 3]
"
}

#
# -d
#

test_linecook_d_renders_each_template_under_dir () {
setup_dir_fixture
linecook -d "$templates_dir" | assert_output "\
x {}
y {}
z {}
"
}

#
# -e
#

test_linecook_e_makes_template_from_string () {
setup_fixture
linecook -e "$(cat "$template_file")" | assert_output "\
got {}
"
}

#
# -h
#

test_linecook_h_prints_help () {
linecook -h | grep -q "usage: linecook"
}

#
# -I
#

test_linecook_I_specifies_LOAD_PATH_directory () {
setup_fixture

require_file="$ts_test_dir/methods.rb"
cat > "$require_file" <<DOC
class Linecook::Context
  def obj
    "override"
  end
end
DOC

linecook -I "$ts_test_dir" -r methods "$template_file" | assert_output "\
got \"override\"
"
}

#
# -o
#

test_linecook_o_renders_each_template_into_file  () {
setup_fixture

output_file="$(linecook -o "$output_dir" "$template_file")"
cat "$output_file" | assert_output "\
got {}
"
}

test_linecook_o_with_d_renders_each_template_by_relative_path () {
setup_dir_fixture

linecook -o "$output_dir" -d "$templates_dir"

cat "$output_dir/x" "$output_dir/y.erb"  "$output_dir/z/z.erb" | assert_output "\
x {}
y {}
z {}
"
}

#
# -r
#

test_linecook_r_requires_file_before_rendering () {
setup_fixture

require_file="$ts_test_dir/methods.rb"
cat > "$require_file" <<DOC
class Linecook::Context
  def obj
    "override"
  end
end
DOC

linecook -r "$require_file" "$template_file" | assert_output "\
got \"override\"
"
}

. ts
